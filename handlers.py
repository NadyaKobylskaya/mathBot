from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from tasks.task_selector import select_task, get_task_content
from db_manager.db import SessionLocal
from db_manager.models import UserProgress
from datetime import datetime

user_task_map = {}

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
task_kb = ReplyKeyboardMarkup(resize_keyboard=True)
task_kb.add(KeyboardButton("/task"))

async def handle_get_task(message: types.Message, state: FSMContext):
    task = await select_task(topic="–∞–ª–≥–µ–±—Ä–∞", difficulty="medium")
    if not task:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=task_kb)
        return

    content = await get_task_content(task.task_id)
    if content is None:
        await message.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.", reply_markup=task_kb)
        return

    user_task_map[message.from_user.id] = (
        task.task_id,
        content.answer_text.strip().lower() if content.answer_text else ""
    )

    msg = (
        f"üìò <b>–ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ:</b> {task.topic}\n"
        f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {task.difficulty}\n\n"
        f"{content.question_text if content.question_text else '–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}\n\n"
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ."
    )
    await message.answer(msg, reply_markup=ReplyKeyboardRemove())

async def handle_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text.strip().lower()

    if user_id not in user_task_map:
        await message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /task", reply_markup=task_kb)
        return

    task_id, correct_answer = user_task_map[user_id]
    is_correct = user_input == correct_answer
    score = 100 if is_correct else 0

    async with SessionLocal() as session:
        progress = UserProgress(
            user_id=user_id,
            task_id=task_id,
            is_completed=True,
            score=score,
            last_attempt_date=datetime.utcnow()
        )
        session.add(progress)
        await session.commit()

    result_msg = (
        "‚úÖ <b>–í–µ—Ä–Ω–æ!</b> –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!" if is_correct
        else f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ.</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{correct_answer}</code>"
    )
    await message.answer(result_msg, reply_markup=task_kb)
    user_task_map.pop(user_id, None)

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(handle_get_task, commands=["task"])
    dp.register_message_handler(handle_answer, state=None)
